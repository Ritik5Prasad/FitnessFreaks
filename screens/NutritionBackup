import React, { useState, useEffect } from "react";
import {
  View,
  Text,
  TouchableOpacity,
  StyleSheet,
  Dimensions,
  Image,
  Alert,
  ScrollView,
  SafeAreaView,
  TextInput,
  ProgressBarAndroid,
  ProgressViewIOS,
  TouchableHighlight
} from "react-native";

import { db } from "../firebase";
import firebase from "firebase";

let ScreenHeight = Dimensions.get("window").height;
let ScreenWidth = Dimensions.get("window").width;

import { useDispatch, useSelector } from "react-redux";
import {
  setDbID,
  selectDbId,
  selectUser,
  setUserData,
  logout,
} from "../features/userSlice";

import { Icon } from "react-native-elements";

import { ProgressCircle } from 'react-native-svg-charts'
import { BarChart, XAxis, YAxis, Grid } from 'react-native-svg-charts'
import DatePicker from 'react-native-datepicker'

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: "#fff",
    alignItems: "center",
    marginBottom: 0,
    paddingTop:RFValue(20, 816),
    minHeight: ScreenHeight,
  },
  progressBar: {
   height:RFValue(20, 816),
   width: '100%',
   backgroundColor: 'white',
   borderColor: '#000',
   borderWidth: 2,
   borderRadius: 5
 }
});


const Nutrition = ({ route, navigation }) => {
  const user = useSelector(selectUser);
  const [userData, setUserData] = useState(null);
  const dispatch = useDispatch();

  const [type, setType] = useState(null);
  const [athlete, setAthlete] = useState(null);
  const [athlete_id, setAthleteId] = useState(null);

 const fill = '#111'
 const [data,setData] = useState([]);
 const [calories,setCalories] = useState("");
 const [carbs,setCarbs] = useState("");
 const [fat,setFat] = useState("");
 const [protein,setProtein] = useState("");
 const [pcalories,setpCalories] = useState("");
 const [pcarbs,setpCarbs] = useState("");
 const [pfat,setpFat] = useState("");
 const [pprotein,setpProtein] = useState("");

 console.log({calories,carbs,fat,protein,pcalories});
 const [mealHistory, setMealHistory] = useState(null);
 const [startDate, setStartDate] = useState(null);


  useEffect(() => {
    db.collection("Food")
      .orderBy("date", "desc")
      .limit(2)
      .onSnapshot((snapshot) => {
          
        setMealHistory(
          snapshot.docs.map((doc) => ({
            id: doc.id,
            data: doc.data(),
          }))
        );
      });
  }, [data]);

 useEffect(()=>{
     let tempCal = 0;
     let tempCarbs = 0;
     let tempFat = 0;
     let tempProtein = 0;

     db.collection("Food")
     .where("date",">=","2021-04-01")
     .get()
    .then((querySnapshot) => {
        querySnapshot.forEach((doc) => {
           tempCal = tempCal + doc.data().calories;
           tempCarbs = tempCarbs + doc.data().carbs;
           tempFat = tempFat + doc.data().fat;
           tempProtein = tempProtein + doc.data().proteins;
        });
        setCalories(tempCal)
        setCarbs(tempCarbs)
        setFat(tempFat)
        setProtein(tempProtein)
        setpCalories(tempCal/100)
    })
    .catch((error) => {
        console.log("Error getting documents: ", error);
    });
 },[])

 useEffect(()=>{
     let reqDate = formatDate();
     let cals = []
      db.collection("Food")
      .where("date",">=",startDate)
      .limit(7)
      .get()
     .then((querySnapshot) => {
         querySnapshot.forEach((doc) => {
             cals.push(doc.data().calories);
         });
         setData(cals)
     })
     .catch((error) => {
         console.log("Error getting documents: ", error);
     });
   
    
 },[startDate])

    //   let reqDate = new Date("2021-03-31");
    //   console.log(reqDate.getDay()," is the day")
 
   

        
   function formatDate() {
    var d = new Date(),
      month = "" + (d.getMonth() + 1),
      day = "" + d.getDate(),
      year = d.getFullYear();

    if (month.length < 2) month = "0" + month;
    if (day.length < 2) day = "0" + day;

    return [year, month, day].join("-");
  }

  useEffect(() => {
    if (route.params?.athlete) {
      setAthlete(route.params?.athlete);
    }
  }, [route.params?.athlete]);

  useEffect(() => {
    if (route.params?.athlete_id) {
      setAthleteId(route.params?.athlete_id);
    }
  }, [route.params?.athlete_id]);

  useEffect(() => {
    if (route.params?.type) {
      setType(route.params?.type);
    }
  }, [route.params?.type]);

  useEffect(() => {
    db.collection("athletes")
      .where("email", "==", user)
      .get()
      .then(function (querySnapshot) {
        console.log("23");
        querySnapshot.forEach(function (doc) {
          setUserData({
            id: doc.id,
            data: doc.data(),
          });
        });
      })
      .catch(function (error) {
        console.log("Error getting documents: ", error);
      });

    if (athlete_id) {
      db.collection("athletes")
        .doc(athlete_id)
        .get()
        .then(function (doc) {
          console.log("24");
          if (doc.exists) {
            console.log("Document data:", doc.data());
            setUserData({ id: doc.id, data: doc.data() });
          } else {
            // doc.data() will be undefined in this case
            console.log("No such document!");
          }
        })
        .catch(function (error) {
          console.log("Error getting document:", error);
        });
    }
  }, [user, athlete_id]);

  return (
    <KeyboardAwareScrollView showsVerticalScrollIndicator={false} keyboardShouldPersistTaps={true}>
      <View style={styles.container}>
        <View
          style={{ 
            flexDirection: "row",
            alignItems: "center",
            justifyContent: "center",
            width:ScreenWidth/1.1,
            marginBottom:45
          }}
        >
          <TouchableOpacity
            style={{
              marginRight: 50,
              position: "absolute",
            left: 0,
            top: 50,
            zIndex: 1,
            }}
            onPress={() => {
              navigation.navigate("Home");
            }}
          >
            <Icon name="chevron-left" type="font-awesome-5" />
          </TouchableOpacity>

          <Text
            style={{
              fontSize:RFValue(20, 816),
              fontFamily: "SF-Pro-Text-regular",
              textAlign: "center",
              position: "absolute",
            left: 25,
            top: 50,
            zIndex: 1,
            }}
          >
            Nutrition
          </Text>
          <TouchableOpacity style={{
              backgroundColor: "#006d77",
              paddingHorizontal:RFValue(15, 816),
              paddingVertical:RFValue(8, 816),
              position:"absolute",
              right:0,
              top:45,
              borderRadius:8
            }} 
            onPress={() => navigation.navigate("AddMeal", {
                athlete,
                athlete_id,
              })
            }>
            <View style={{display:"flex",flexDirection:"row",alignItems:"center"}}> 
                <Icon name="plus" size={15} style={{marginRight:10}} color="white" type="font-awesome-5" />
                <Text style={{color:"white"}}>ADD MEAL</Text>
            </View>
          </TouchableOpacity>
        </View>

        <View style={{
            display: "flex",
            flexDirection: "column",
            alignItems: "center",
            justifyContent: "center",
            marginVertical:RFValue(10, 816),
            marginTop: 100,
            
          }}>
            <View style={{
                width:ScreenWidth/1.1,
                backgroundColor:"#ddd",
                borderRadius:5,
                marginBottom:30
            }}>
            <View style={{
                display: "flex",
            flexDirection: "row",
            alignItems: "center",
            justifyContent: "center",
            
            }}>
                <View style={{
                     display: "flex",
            flexDirection: "row",
            alignItems: "center",
            justifyContent: "center",
                }}>
                <ProgressCircle style={{ height: 170,width:130,marginRight:20 }} strokeWidth={20} progress={calories/1000} progressColor={'#006d77'} />
                <Text style={{position:"absolute",left:30,width:70,textAlign:"center"}}>Goal 24,000 Calories</Text>
               </View>
                <View style={{
                     display: "flex",
            flexDirection: "column",
            alignItems: "center",
            justifyContent: "center",
                }}>
                  <View style={{
                     display: "flex",
            flexDirection: "column",
            alignItems: "center",
            justifyContent: "center",
                }}>
                <Text style={{width:160}}>{carbs} Carbs of 100</Text>
                {  
            ( Platform.OS === 'android' )  
            ?  
              (  <ProgressBarAndroid
                styleAttr="Horizontal"
                indeterminate={false}
                progress={carbs/100}
                style={{width:160,height:RFValue(20, 816),color:"#006d77"}}
                /> )  
            :  
              ( <ProgressViewIOS progress={carbs/100} /> )  
        }  
             
                </View>
                <View style={{
                     display: "flex",
            flexDirection: "column",
            alignItems: "center",
            justifyContent: "center",
                }}>
                <Text style={{width:160}}>{fat} Fat of 100</Text>
               {  
            ( Platform.OS === 'android' )  
            ?  
              (  <ProgressBarAndroid
                styleAttr="Horizontal"
                indeterminate={false}
                progress={fat/100}
                style={{width:160,height:RFValue(20, 816),color:"#006d77"}}
                /> )  
            :  
              ( <ProgressViewIOS progress={fat/100} /> )  
        }  
                </View>
                <View style={{
                     display: "flex",
            flexDirection: "column",
            alignItems: "center",
            justifyContent: "center",
                }}>
                <Text style={{width:160}}>{protein} Protiens of 100</Text>
              {  
            ( Platform.OS === 'android' )  
            ?  
              (  <ProgressBarAndroid
                styleAttr="Horizontal"
                indeterminate={false}
                progress={protein/100}
                style={{width:160,height:RFValue(20, 816),color:"#006d77"}}
                /> )  
            :  
              ( <ProgressViewIOS progress={protein/100} /> )  
        }  
                </View>
                </View>
            </View>
            </View>

            <View style={{display:"flex",flexDirection:"row",width:ScreenWidth/1.1}}>
             <Text
            style={{
              fontSize: 17,
              fontFamily: "SF-Pro-Text-regular",
             
            
            }}
          >
            Meal History
          </Text>
          <TouchableHighlight style={{position:"absolute",right:RFValue(10, 816),top:-5,paddingHorizontal:RFValue(10, 816),paddingVertical:5,borderRadius:8}} onPress={()=> navigation.navigate("MealHistory", {
                athlete,
                athlete_id,
              })}  activeOpacity={0.6}
            underlayColor="#DDDDDD">
          <Text
            style={{
              fontSize: 16,
              fontFamily: "SF-Pro-Text-regular",
            }}
          >
            View all
          </Text>
          </TouchableHighlight>
          </View>

        <View
          style={{
            display: "flex",
            flexDirection: "column",
            alignItems: "center",
            justifyContent: "center",
            marginVertical:RFValue(10, 816),
            
            marginLeft:RFValue(5, 816),
          }}
        >
          {mealHistory?.map((food, idx) => (
            <TouchableOpacity
              style={{
                width: ScreenWidth / 1.1,
                height: 130,
                display: "flex",
                flexDirection: "row",
                alignItems: "center",
                backgroundColor: "#ddd",
                marginVertical:RFValue(15, 816),
                padding:RFValue(10, 816),
                borderRadius: 4,
              }}
            >
              <View
                style={{
                  width: 100,
                  height: 100,
                  margin:RFValue(5, 816),
                  borderRadius:RFValue(8, 816),
                  backgroundColor: "#777",
                }}
              ></View>
              <View
                style={{
                  flexDirection: "column",
                  marginHorizontal:RFValue(15, 816),
                }}
              >
                <Text
                  style={{ fontSize: 18, fontWeight: "700", marginBottom: 8 }}
                >
                  {food.data.mealType}
                </Text>
                <View
                  style={{
                    display: "flex",
                    flexDirection: "row",
                    alignItems: "center",
                  }}
                >
                  <Text style={{ width: 60 }}>Proteins</Text>
                  <Text>{food.data.proteins} g</Text>
                </View>
                <View
                  style={{
                    display: "flex",
                    flexDirection: "row",
                    alignItems: "center",
                  }}
                >
                  <Text style={{ width: 60 }}>Fat</Text>
                  <Text>{food.data.fat} g</Text>
                </View>
                <View
                  style={{
                    display: "flex",
                    flexDirection: "row",
                    alignItems: "center",
                  }}
                >
                  <Text style={{ width: 60 }}>Carbs</Text>
                  <Text>{food.data.carbs} g</Text>
                </View>
              </View>
              <TouchableOpacity
                style={{
                  position: "absolute",
                  right: 25,
                }}
                // onPress={() => {
                //   navigation.navigate("AddMeal");
                // }}
              >
                <Icon name="chevron-right" color="#555" type="font-awesome-5" />
              </TouchableOpacity>
            </TouchableOpacity>
          ))}
        </View>
        <DatePicker
        style={{width: 200}}
        date={startDate}
        mode="date"
        placeholder="select start date"
        format="YYYY-MM-DD"
        confirmBtnText="Confirm"
        cancelBtnText="Cancel"
        showIcon={false}
        customStyles={{
          dateIcon: {
            position: 'absolute',
            left: 0,
            top: 4,
            marginLeft: 0
          },
          dateInput: {
            marginLeft: 36
          }
          // ... You can check the source to find the other keys.
        }}
        onDateChange={(date) => setStartDate(date)}
      />
       
<View style={{ height: 250,width:ScreenWidth/1.1, padding:RFValue(20, 816),display:"flex",flexDirection:"row",alignItems:"center" }}>

 <YAxis
                    data={data}
                    contentInset={{ top:RFValue(5, 816), bottom: 5 }}
                    svg={{
                        fill: 'grey',
                        fontSize:RFValue(12, 816),
                    }}
                    style={{height:150,marginRight:15}}
                    formatLabel={(value) => `${value}`}
                    numberOfTicks={6}
                />
                <View style={{ height: 200,width:ScreenWidth/1.5}}>
                <BarChart style={{ height: 200 }} data={data} svg={{  fill:  `#006d77` }}  spacingInner={0.45}
                     spacingOuter={0.3} contentInset={{ top: 30, bottom: 30 }}>
               {/* #7388A9 */}
            </BarChart>
                <XAxis
                    style={{ marginHorizontal:RFValue(10, 816),marginTop: RFValue(10, 816)}}
                    data={data}
                    formatLabel={(value, index) => 
                        index+1
                     }
                    contentInset={{ left:RFValue(10, 816), right: RFValue(10, 816)}}
                    svg={{ fontSize:RFValue(12, 816), fill: '#333', fontWeight:"600" }}
                   
                />
                {data.length > 1 ? <Text style={{textAlign:"center"}}>Days</Text> : null}
               </View>
            </View>

        </View>

       
      </View>
    </KeyboardAwareScrollView>
  );
};

export default Nutrition;


import React, { useState, useEffect } from "react";
import {
  View,
  Text,
  TouchableOpacity,
  StyleSheet,
  Dimensions,
  Image,
  Alert,
  ScrollView,
  SafeAreaView,
  TextInput,
} from "react-native";

import { db } from "../../firebase";

let ScreenHeight = Dimensions.get("window").height;
let ScreenWidth = Dimensions.get("window").width;

import { useDispatch, useSelector } from "react-redux";
import {
  setDbID,
  selectDbId,
  selectUser,
  setUserData,
  logout,
} from "../../features/userSlice";

import { Icon } from "react-native-elements";

import SearchableDropdown from "react-native-searchable-dropdown";
import { Picker } from "@react-native-picker/picker";

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: "#fff",
    alignItems: "center",
    marginBottom: 0,
    paddingTop:RFValue(20, 816),
    height: ScreenHeight,
  },
});

const UselessTextInput = (props) => {
  return (
    <TextInput
      style={{
        textAlignVertical: "top",
        padding:RFValue(10, 816),
        width: ScreenWidth / 1.2,
      }}
      {...props} // Inherit any props passed to it; e.g., multiline, numberOfLines below
      editable={props.isEnabled}
      maxLength={40}
      multiline={true}
    />
  );
};

const CoachAddMeal = ({ route, navigation }) => {
  const user = useSelector(selectUser);
  const [userData, setUserData] = useState(null);
  const [editable, setEditable] = useState(false);
  const [serverData, setServerData] = useState([]);

  const [plan, setPlan] = useState([
    {
      foodName: "",
      meal: "",
      description: "",
    },
  ]);

  const dispatch = useDispatch();

  const [type, setType] = useState(null);
  const [athlete, setAthlete] = useState(null);
  const [athlete_id, setAthleteId] = useState(null);

  function formatDate() {
    var d = new Date(),
      month = "" + (d.getMonth() + 1),
      day = "" + d.getDate(),
      year = d.getFullYear();

    if (month.length < 2) month = "0" + month;
    if (day.length < 2) day = "0" + day;

    return [year, month, day].join("-");
  }

  useEffect(() => {
    fetch("https://rongoeirnet.herokuapp.com/getFood")
      .then((response) => response.json())
      .then((responseJson) => {
        //Successful response from the API Call
        setServerData(responseJson.data);
      })
      .catch((error) => {
        console.error(error);
      });
  }, []);

  useEffect(() => {
    if (route.params?.athlete) {
      setAthlete(route.params?.athlete);
    }
  }, [route.params?.athlete]);

  useEffect(() => {
    if (route.params?.athlete_id) {
      setAthleteId(route.params?.athlete_id);
    }
  }, [route.params?.athlete_id]);

  useEffect(() => {
    if (route.params?.type) {
      setType(route.params?.type);
    }
  }, [route.params?.type]);

  useEffect(() => {
    db.collection("athletes")
      .where("email", "==", user)
      .get()
      .then(function (querySnapshot) {
        console.log("23");
        querySnapshot.forEach(function (doc) {
          setUserData({
            id: doc.id,
            data: doc.data(),
          });
        });
      })
      .catch(function (error) {
        console.log("Error getting documents: ", error);
      });

    if (athlete_id) {
      db.collection("athletes")
        .doc(athlete_id)
        .get()
        .then(function (doc) {
          console.log("24");
          if (doc.exists) {
            console.log("Document data:", doc.data());
            setUserData({ id: doc.id, data: doc.data() });
          } else {
            // doc.data() will be undefined in this case
            console.log("No such document!");
          }
        })
        .catch(function (error) {
          console.log("Error getting document:", error);
        });
    }
  }, [user, athlete_id]);

  console.log({ plan });

  return (
    <View style={styles.container}>
      <KeyboardAwareScrollView keyboardShouldPersistTaps="always">
        <View
          style={{
            position: "absolute",
            left: 25,
            top:RFValue(10, 816),
            zIndex: 1,
            flexDirection: "row",
            alignItems: "center",
            justifyContent: "center",
          }}
        >
          <TouchableOpacity
            style={{
              marginRight: 50,
            }}
            onPress={() => {
              navigation.navigate("CoachNutrition");
            }}
          >
            <Icon name="chevron-left" type="font-awesome-5" />
          </TouchableOpacity>

          <Text
            style={{
              fontSize:RFValue(20, 816),
              fontFamily: "SF-Pro-Text-regular",
              textAlign: "center",
            }}
          >
            Add Meal
          </Text>
        </View>

        {/* <TouchableOpacity
          style={{
            position: "absolute",
            right: 30,
            top:RFValue(10, 816),
          }}
          onPress={() => {
            navigation.navigate("MealHistory");
          }}
        >
          <Icon name="history" type="font-awesome-5" />
        </TouchableOpacity> */}

        <View
          style={{
            display: "flex",
            flexDirection: "column",
            alignItems: "center",
            justifyContent: "center",
            marginVertical:RFValue(10, 816),
            marginTop: ScreenHeight * 0.1,
          }}
        >
          <Image
            style={{
              width: ScreenWidth,
              height: 180,
              marginBottom:RFValue(20, 816),
            }}
            source={{
              uri:
                "https://firebasestorage.googleapis.com/v0/b/triden-workout-app.appspot.com/o/app_images%2Fnutrition.jpeg?alt=media&token=57c137c0-3f00-4f5d-bd18-daf8f2a919c8",
            }}
          />
          <View>
            {plan?.map((item, idx) => {
              return (
                <View key={idx}>
                  <View
                    style={{
                      alignItems: "flex-start",
                    }}
                    key={idx}
                  >
                    <Text style={{ margin:RFValue(10, 816), marginTop: RFValue(10, 816)}}>Food Name</Text>
                    <SafeAreaView>
                      <SearchableDropdown
                        key={idx}
                        onTextChange={(text) => console.log(text)}
                        onItemSelect={(item) => {
                          let tempMeal = [...plan];
                          tempMeal[idx].foodName = item.name;
                          setPlan(tempMeal);
                        }}
                        setSort={(item, searchedText) =>
                          item.name
                            .toLowerCase()
                            .startsWith(searchedText.toLowerCase())
                        }
                        containerStyle={{ padding: 5 }}
                        textInputStyle={{
                          padding:RFValue(12, 816),
                          borderWidth: 1,
                          borderColor: "#ccc",
                          backgroundColor: "#FAF7F6",
                          width: ScreenWidth - 80,
                        }}
                        itemStyle={{
                          padding:RFValue(10, 816),
                          marginTop: 2,
                          backgroundColor: "#FAF9F8",
                          borderColor: "#bbb",
                          borderWidth: 1,
                        }}
                        itemTextStyle={{
                          color: "#222",
                        }}
                        itemsContainerStyle={{
                          maxHeight: 120,
                          margin: 0,
                          padding: 0,
                        }}
                        items={serverData}
                        listProps={{
                          nestedScrollEnabled: true,
                        }}
                        defaultIndex={2}
                        placeholder={
                          item.foodName ? item.foodName : "Enter Food Name"
                        }
                        resetValue={false}
                        underlineColorAndroid="transparent"
                      />
                    </SafeAreaView>
                  </View>

                  <View>
                    <Text style={{ margin:RFValue(10, 816), marginTop: 25 }}>
                      Select Meal
                    </Text>
                    <Picker
                      key={idx}
                      selectedValue={item.meal}
                      style={{
                        height:RFValue(15, 816),
                        width: ScreenWidth - 60,
                        padding:RFValue(15, 816),
                        borderWidth: 1,
                        borderColor: "#777",
                      }}
                      onValueChange={(itemValue) => {
                        let tempMeal = [...plan];
                        tempMeal[idx].meal = itemValue;
                        setPlan(tempMeal);
                      }}
                    >
                      <Picker.Item
                        label={"Select the type of meal"}
                        value={""}
                      />

                      <Picker.Item label={"Breakfast"} value={"Breakfast"} />

                      <Picker.Item label={"Lunch"} value={"Lunch"} />

                      <Picker.Item label={"Snack"} value={"Snack"} />

                      <Picker.Item
                        label={"Pre Workout"}
                        value={"Pre Workout"}
                      />

                      <Picker.Item
                        label={"Post Workout"}
                        value={"Post Workout"}
                      />

                      <Picker.Item label={"Dinner"} value={"Dinner"} />
                    </Picker>
                  </View>

                  <View style={{ marginTop: RFValue(20, 816)}}>
                    <Text>Description</Text>
                    <View
                      style={{
                        borderColor: "#999",
                        borderWidth: 0.8,
                        marginVertical:RFValue(10, 816),
                      }}
                    >
                      <UselessTextInput
                        key={idx}
                        multiline
                        numberOfLines={4}
                        placeholder="Enter Meal Description"
                        onChangeText={(text) => {
                          let tempMeal = [...plan];
                          tempMeal[idx].description = text;
                          setPlan(tempMeal);
                        }}
                        value={item.description}
                      />
                    </View>
                  </View>
                  {plan.length > 1 && (
                    <View
                      style={{
                        width: ScreenWidth - 30,
                        borderTopWidth: 0.8,
                        marginVertical:RFValue(10, 816),
                      }}
                    ></View>
                  )}
                </View>
              );
            })}
          </View>

          <TouchableOpacity
            style={{
              height: 52,
              width: ScreenWidth,
              marginTop: 45,
              marginBottom:RFValue(15, 816),
              justifyContent: "center",
              alignItems: "center",
              display: "flex",
              backgroundColor: "#ddd",
            }}
            onPress={() => {
              setPlan([
                ...plan,
                {
                  foodName: "",
                  meal: "",
                  description: "",
                },
              ]);
            }}
          >
            <Text
              style={{
                color: "#006D77",
                fontFamily: "SF-Pro-Display-regular",
                fontSize:RFValue(12, 816),
                textAlign: "center",
              }}
            >
              Add Meal
            </Text>
          </TouchableOpacity>

          {/* <View
            style={{
              width: ScreenWidth - 30,
              borderTopWidth: 0.8,
            }}
          ></View> */}

          <TouchableOpacity
            style={{
              height: 52,
              width: ScreenWidth - 25,
              marginTop:RFValue(15, 816),
              marginBottom: 25,
              justifyContent: "center",
              alignItems: "center",
              borderRadius:RFValue(15, 816),
              backgroundColor: "#006D77",
              borderWidth: 1,
              borderColor: "#006D77",
            }}
            onPress={() => {
              db.collection("Food").add({
                user_id: athlete.id,
                date: formatDate(),
                foodName,
                mealType: meal,
                proteins,
                carbs,
                fat,
                calories,
                fibre,
                description,
              });
              navigation.navigate("Home");
            }}
          >
            <View>
              <Text
                style={{
                  color: "#fff",
                  fontFamily: "SF-Pro-Display-regular",
                  fontSize:RFValue(15, 816),
                  textAlign: "center",
                }}
              >
                Add Plan
              </Text>
            </View>
          </TouchableOpacity>
        </View>
      </KeyboardAwareScrollView>
    </View>
  );
};

export default CoachAddMeal;
